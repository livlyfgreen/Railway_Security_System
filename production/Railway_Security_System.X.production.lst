

Microchip Technology PIC LITE Macro Assembler V1.36 build -262312587 
                                                                                               Wed May 22 14:40:59 2024

Microchip Technology Omniscient Code Generator v1.36 (Free mode) build 201601150325
     1                           	processor	16F876A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	inittext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	dabs	1,0x7E,2
    28  0000                     	;# 
    29  0001                     	;# 
    30  0002                     	;# 
    31  0003                     	;# 
    32  0004                     	;# 
    33  0005                     	;# 
    34  0006                     	;# 
    35  0007                     	;# 
    36  000A                     	;# 
    37  000B                     	;# 
    38  000C                     	;# 
    39  000D                     	;# 
    40  000E                     	;# 
    41  000E                     	;# 
    42  000F                     	;# 
    43  0010                     	;# 
    44  0011                     	;# 
    45  0012                     	;# 
    46  0013                     	;# 
    47  0014                     	;# 
    48  0015                     	;# 
    49  0015                     	;# 
    50  0016                     	;# 
    51  0017                     	;# 
    52  0018                     	;# 
    53  0019                     	;# 
    54  001A                     	;# 
    55  001B                     	;# 
    56  001B                     	;# 
    57  001C                     	;# 
    58  001D                     	;# 
    59  001E                     	;# 
    60  001F                     	;# 
    61  0081                     	;# 
    62  0085                     	;# 
    63  0086                     	;# 
    64  0087                     	;# 
    65  008C                     	;# 
    66  008D                     	;# 
    67  008E                     	;# 
    68  0091                     	;# 
    69  0092                     	;# 
    70  0093                     	;# 
    71  0094                     	;# 
    72  0098                     	;# 
    73  0099                     	;# 
    74  009C                     	;# 
    75  009D                     	;# 
    76  009E                     	;# 
    77  009F                     	;# 
    78  010C                     	;# 
    79  010D                     	;# 
    80  010E                     	;# 
    81  010F                     	;# 
    82  018C                     	;# 
    83  018D                     	;# 
    84                           
    85                           	psect	idataBANK0
    86  05EA                     __pidataBANK0:	
    87                           
    88                           ;initializer for _UID
    89  05EA  3430               	retlw	48
    90  05EB  3430               	retlw	48
    91  05EC  3430               	retlw	48
    92  05ED  3434               	retlw	52
    93  05EE  3432               	retlw	50
    94  05EF  3437               	retlw	55
    95  05F0  3434               	retlw	52
    96  05F1  3434               	retlw	52
    97  05F2  3438               	retlw	56
    98  05F3  3432               	retlw	50
    99  05F4  3400               	retlw	0
   100  05F5  3400               	retlw	0
   101  05F6  3400               	retlw	0
   102  05F7  3400               	retlw	0
   103  05F8  3400               	retlw	0
   104  05F9  3400               	retlw	0
   105  05FA  3400               	retlw	0
   106  05FB  3400               	retlw	0
   107  05FC  3400               	retlw	0
   108  05FD  3400               	retlw	0
   109  001F                     _ADCON0	set	31
   110  001E                     _ADRESH	set	30
   111  0007                     _PORTC	set	7
   112  001A                     _RCREG	set	26
   113  0018                     _RCSTA	set	24
   114  0019                     _TXREG	set	25
   115  00FA                     _GO	set	250
   116  0038                     _RC0	set	56
   117  0039                     _RC1	set	57
   118  003A                     _RC2	set	58
   119  003B                     _RC3	set	59
   120  003C                     _RC4	set	60
   121  003D                     _RC5	set	61
   122  0065                     _RCIF	set	101
   123  009F                     _ADCON1	set	159
   124  009E                     _ADRESL	set	158
   125  0099                     _SPBRG	set	153
   126  0085                     _TRISA	set	133
   127  0087                     _TRISC	set	135
   128  0098                     _TXSTA	set	152
   129  04C1                     _TRMT	set	1217
   130                           
   131                           	psect	strings
   132  0003                     __pstrings:	
   133  0003                     stringtab:	
   134  0003                     __stringtab:	
   135  0003                     stringcode:	
   136                           ;	String table - string pointers are 1 byte each
   137                           
   138  0003                     stringdir:	
   139  0003  3000               	movlw	high stringdir
   140  0004  008A               	movwf	10
   141  0005  0804               	movf	4,w
   142  0006  0A84               	incf	4,f
   143  0007  0782               	addwf	2,f
   144  0008                     __stringbase:	
   145  0008  3400               	retlw	0
   146  0009                     __end_of__stringtab:	
   147  0009                     STR_4:	
   148  0009  3454               	retlw	84	;'T'
   149  000A  3472               	retlw	114	;'r'
   150  000B  3461               	retlw	97	;'a'
   151  000C  3469               	retlw	105	;'i'
   152  000D  346E               	retlw	110	;'n'
   153  000E  3420               	retlw	32	;' '
   154  000F  3473               	retlw	115	;'s'
   155  0010  3474               	retlw	116	;'t'
   156  0011  346F               	retlw	111	;'o'
   157  0012  3470               	retlw	112	;'p'
   158  0013  3470               	retlw	112	;'p'
   159  0014  3465               	retlw	101	;'e'
   160  0015  3464               	retlw	100	;'d'
   161  0016  3420               	retlw	32	;' '
   162  0017  3461               	retlw	97	;'a'
   163  0018  3473               	retlw	115	;'s'
   164  0019  3420               	retlw	32	;' '
   165  001A  3474               	retlw	116	;'t'
   166  001B  3468               	retlw	104	;'h'
   167  001C  3465               	retlw	101	;'e'
   168  001D  3420               	retlw	32	;' '
   169  001E  3474               	retlw	116	;'t'
   170  001F  3472               	retlw	114	;'r'
   171  0020  3461               	retlw	97	;'a'
   172  0021  3463               	retlw	99	;'c'
   173  0022  346B               	retlw	107	;'k'
   174  0023  3420               	retlw	32	;' '
   175  0024  3469               	retlw	105	;'i'
   176  0025  3473               	retlw	115	;'s'
   177  0026  3420               	retlw	32	;' '
   178  0027  346E               	retlw	110	;'n'
   179  0028  346F               	retlw	111	;'o'
   180  0029  3474               	retlw	116	;'t'
   181  002A  3420               	retlw	32	;' '
   182  002B  3463               	retlw	99	;'c'
   183  002C  346C               	retlw	108	;'l'
   184  002D  3465               	retlw	101	;'e'
   185  002E  3461               	retlw	97	;'a'
   186  002F  3472               	retlw	114	;'r'
   187  0030  3421               	retlw	33	;'!'
   188  0031  340D               	retlw	13
   189  0032  340A               	retlw	10
   190  0033  3400               	retlw	0
   191  0034                     STR_5:	
   192  0034  3454               	retlw	84	;'T'
   193  0035  3472               	retlw	114	;'r'
   194  0036  3461               	retlw	97	;'a'
   195  0037  3469               	retlw	105	;'i'
   196  0038  346E               	retlw	110	;'n'
   197  0039  3420               	retlw	32	;' '
   198  003A  3463               	retlw	99	;'c'
   199  003B  3472               	retlw	114	;'r'
   200  003C  346F               	retlw	111	;'o'
   201  003D  3473               	retlw	115	;'s'
   202  003E  3473               	retlw	115	;'s'
   203  003F  3469               	retlw	105	;'i'
   204  0040  346E               	retlw	110	;'n'
   205  0041  3467               	retlw	103	;'g'
   206  0042  342C               	retlw	44	;','
   207  0043  3420               	retlw	32	;' '
   208  0044  3462               	retlw	98	;'b'
   209  0045  3465               	retlw	101	;'e'
   210  0046  3420               	retlw	32	;' '
   211  0047  3461               	retlw	97	;'a'
   212  0048  346C               	retlw	108	;'l'
   213  0049  3465               	retlw	101	;'e'
   214  004A  3472               	retlw	114	;'r'
   215  004B  3474               	retlw	116	;'t'
   216  004C  342E               	retlw	46	;'.'
   217  004D  342E               	retlw	46	;'.'
   218  004E  340D               	retlw	13
   219  004F  340A               	retlw	10
   220  0050  3400               	retlw	0
   221  0051                     STR_6:	
   222  0051  344E               	retlw	78	;'N'
   223  0052  346F               	retlw	111	;'o'
   224  0053  3420               	retlw	32	;' '
   225  0054  3474               	retlw	116	;'t'
   226  0055  3468               	retlw	104	;'h'
   227  0056  3472               	retlw	114	;'r'
   228  0057  3465               	retlw	101	;'e'
   229  0058  3461               	retlw	97	;'a'
   230  0059  3474               	retlw	116	;'t'
   231  005A  3420               	retlw	32	;' '
   232  005B  3464               	retlw	100	;'d'
   233  005C  3465               	retlw	101	;'e'
   234  005D  3474               	retlw	116	;'t'
   235  005E  3465               	retlw	101	;'e'
   236  005F  3463               	retlw	99	;'c'
   237  0060  3474               	retlw	116	;'t'
   238  0061  3465               	retlw	101	;'e'
   239  0062  3464               	retlw	100	;'d'
   240  0063  342E               	retlw	46	;'.'
   241  0064  342E               	retlw	46	;'.'
   242  0065  340D               	retlw	13
   243  0066  340A               	retlw	10
   244  0067  3400               	retlw	0
   245  0068                     STR_1:	
   246  0068  3441               	retlw	65	;'A'
   247  0069  3470               	retlw	112	;'p'
   248  006A  3470               	retlw	112	;'p'
   249  006B  3472               	retlw	114	;'r'
   250  006C  346F               	retlw	111	;'o'
   251  006D  3478               	retlw	120	;'x'
   252  006E  3469               	retlw	105	;'i'
   253  006F  346D               	retlw	109	;'m'
   254  0070  3461               	retlw	97	;'a'
   255  0071  3474               	retlw	116	;'t'
   256  0072  3465               	retlw	101	;'e'
   257  0073  3420               	retlw	32	;' '
   258  0074  3474               	retlw	116	;'t'
   259  0075  3468               	retlw	104	;'h'
   260  0076  3465               	retlw	101	;'e'
   261  0077  3420               	retlw	32	;' '
   262  0078  3454               	retlw	84	;'T'
   263  0079  3461               	retlw	97	;'a'
   264  007A  3467               	retlw	103	;'g'
   265  007B  340D               	retlw	13
   266  007C  340A               	retlw	10
   267  007D  3400               	retlw	0
   268  007E                     STR_3:	
   269  007E  340D               	retlw	13
   270  007F  340A               	retlw	10
   271  0080  3441               	retlw	65	;'A'
   272  0081  3463               	retlw	99	;'c'
   273  0082  3463               	retlw	99	;'c'
   274  0083  3465               	retlw	101	;'e'
   275  0084  3473               	retlw	115	;'s'
   276  0085  3473               	retlw	115	;'s'
   277  0086  3420               	retlw	32	;' '
   278  0087  3447               	retlw	71	;'G'
   279  0088  3472               	retlw	114	;'r'
   280  0089  3461               	retlw	97	;'a'
   281  008A  346E               	retlw	110	;'n'
   282  008B  3474               	retlw	116	;'t'
   283  008C  3465               	retlw	101	;'e'
   284  008D  3464               	retlw	100	;'d'
   285  008E  3421               	retlw	33	;'!'
   286  008F  340D               	retlw	13
   287  0090  340A               	retlw	10
   288  0091  3400               	retlw	0
   289  0092                     STR_2:	
   290  0092  3441               	retlw	65	;'A'
   291  0093  3463               	retlw	99	;'c'
   292  0094  3463               	retlw	99	;'c'
   293  0095  3465               	retlw	101	;'e'
   294  0096  3473               	retlw	115	;'s'
   295  0097  3473               	retlw	115	;'s'
   296  0098  3420               	retlw	32	;' '
   297  0099  3444               	retlw	68	;'D'
   298  009A  3465               	retlw	101	;'e'
   299  009B  346E               	retlw	110	;'n'
   300  009C  3469               	retlw	105	;'i'
   301  009D  3465               	retlw	101	;'e'
   302  009E  3464               	retlw	100	;'d'
   303  009F  3421               	retlw	33	;'!'
   304  00A0  340D               	retlw	13
   305  00A1  340A               	retlw	10
   306  00A2  3400               	retlw	0
   307                           
   308                           ; #config settings
   309  0000                     
   310                           	psect	cinit
   311  07E3                     start_initialization:	
   312  07E3                     __initialization:	
   313                           
   314                           ; Clear objects allocated to COMMON
   315  07E3  01F9               	clrf	__pbssCOMMON& (0+127)
   316  07E4  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
   317  07E5  01FB               	clrf	(__pbssCOMMON+2)& (0+127)
   318  07E6  01FC               	clrf	(__pbssCOMMON+3)& (0+127)
   319  07E7  01FD               	clrf	(__pbssCOMMON+4)& (0+127)
   320                           
   321                           ; Clear objects allocated to BANK0
   322  07E8  1383               	bcf	3,7	;select IRP bank0
   323  07E9  3020               	movlw	low __pbssBANK0
   324  07EA  0084               	movwf	4
   325  07EB  304A               	movlw	low (__pbssBANK0+42)
   326  07EC  120A  118A  2596  120A  118A  	fcall	clear_ram0
   327                           
   328                           ; Initialize objects allocated to BANK0
   329  07F1  305E               	movlw	low (__pdataBANK0+20)
   330  07F2  00FD               	movwf	btemp+-1
   331  07F3  3005               	movlw	high __pidataBANK0
   332  07F4  00FE               	movwf	btemp
   333  07F5  30EA               	movlw	low __pidataBANK0
   334  07F6  00FF               	movwf	btemp+1
   335  07F7  304A               	movlw	low __pdataBANK0
   336  07F8  0084               	movwf	4
   337  07F9  120A  118A  25DD   	fcall	init_ram0
   338  07FC                     end_of_initialization:	
   339                           ;End of C runtime variable initialization code
   340                           
   341  07FC                     __end_of__initialization:	
   342  07FC  0183               	clrf	3
   343  07FD  120A  118A  2F0C   	ljmp	_main	;jump to C main() function
   344                           
   345                           	psect	bssCOMMON
   346  0079                     __pbssCOMMON:	
   347  0079                     _reading1:	
   348  0079                     	ds	2
   349  007B                     _reading2:	
   350  007B                     	ds	2
   351  007D                     _temp:	
   352  007D                     	ds	1
   353                           
   354                           	psect	bssBANK0
   355  0020                     __pbssBANK0:	
   356  0020                     _adcStr:	
   357  0020                     	ds	20
   358  0034                     _access:	
   359  0034                     	ds	2
   360  0036                     _INID:	
   361  0036                     	ds	20
   362                           
   363                           	psect	dataBANK0
   364  004A                     __pdataBANK0:	
   365  004A                     _UID:	
   366  004A                     	ds	20
   367                           
   368                           	psect	clrtext
   369  0596                     clear_ram0:	
   370                           ;	Called with FSR containing the base address, and
   371                           ;	W with the last address+1
   372                           
   373  0596  0064               	clrwdt	;clear the watchdog before getting into this loop
   374  0597                     clrloop0:	
   375  0597  0180               	clrf	0	;clear RAM location pointed to by FSR
   376  0598  0A84               	incf	4,f	;increment pointer
   377  0599  0604               	xorwf	4,w	;XOR with final address
   378  059A  1903               	btfsc	3,2	;have we reached the end yet?
   379  059B  3400               	retlw	0	;all done for this memory range, return
   380  059C  0604               	xorwf	4,w	;XOR again to restore value
   381  059D  2D97               	goto	clrloop0	;do the next byte
   382                           
   383                           	psect	inittext
   384  05D9                     init_fetch0:	
   385                           ;	Called with low address in FSR and high address in W
   386                           
   387  05D9  087E               	movf	126,w
   388  05DA  008A               	movwf	10
   389  05DB  087F               	movf	127,w
   390  05DC  0082               	movwf	2
   391  05DD                     init_ram0:	
   392                           ;Called with:
   393                           ;	high address of idata address in btemp 
   394                           ;	low address of idata address in btemp+1 
   395                           ;	low address of data in FSR
   396                           ;	high address + 1 of data in btemp-1
   397                           
   398  05DD  25D9  120A  118A   	fcall	init_fetch0
   399  05E0  0080               	movwf	0
   400  05E1  0A84               	incf	4,f
   401  05E2  0804               	movf	4,w
   402  05E3  067D               	xorwf	125,w
   403  05E4  1903               	btfsc	3,2
   404  05E5  3400               	retlw	0
   405  05E6  0AFF               	incf	127,f
   406  05E7  1903               	btfsc	3,2
   407  05E8  0AFE               	incf	126,f
   408  05E9  2DDD               	goto	init_ram0
   409                           
   410                           	psect	cstackCOMMON
   411  0070                     __pcstackCOMMON:	
   412  0070                     ?_gpioInit:	
   413  0070                     ??_gpioInit:	
   414                           ; 1 bytes @ 0x0
   415                           
   416  0070                     ?_riskCalling:	
   417                           ; 1 bytes @ 0x0
   418                           
   419  0070                     ?_threatCalling:	
   420                           ; 1 bytes @ 0x0
   421                           
   422  0070                     ?_safeCalling:	
   423                           ; 1 bytes @ 0x0
   424                           
   425  0070                     ?_servoRotate90:	
   426                           ; 1 bytes @ 0x0
   427                           
   428  0070                     ??_servoRotate90:	
   429                           ; 1 bytes @ 0x0
   430                           
   431  0070                     ?_riskAlarm:	
   432                           ; 1 bytes @ 0x0
   433                           
   434  0070                     ??_riskAlarm:	
   435                           ; 1 bytes @ 0x0
   436                           
   437  0070                     ?_servoRotate0:	
   438                           ; 1 bytes @ 0x0
   439                           
   440  0070                     ??_servoRotate0:	
   441                           ; 1 bytes @ 0x0
   442                           
   443  0070                     ?_serialInit:	
   444                           ; 1 bytes @ 0x0
   445                           
   446  0070                     ??_serialInit:	
   447                           ; 1 bytes @ 0x0
   448                           
   449  0070                     ?_serialPrint:	
   450                           ; 1 bytes @ 0x0
   451                           
   452  0070                     ??_serialPrint:	
   453                           ; 1 bytes @ 0x0
   454                           
   455  0070                     ?_serialRead:	
   456                           ; 1 bytes @ 0x0
   457                           
   458  0070                     ??_serialRead:	
   459                           ; 1 bytes @ 0x0
   460                           
   461  0070                     ?_analogInit:	
   462                           ; 1 bytes @ 0x0
   463                           
   464  0070                     ??_analogInit:	
   465                           ; 1 bytes @ 0x0
   466                           
   467  0070                     ?_strcmp:	
   468                           ; 1 bytes @ 0x0
   469                           
   470  0070                     ?_analogRead:	
   471                           ; 2 bytes @ 0x0
   472                           
   473  0070                     ?_main:	
   474                           ; 2 bytes @ 0x0
   475                           
   476  0070                     strcmp@s2:	
   477                           ; 2 bytes @ 0x0
   478                           
   479  0070                     serialPrint@i:	
   480                           ; 1 bytes @ 0x0
   481                           
   482  0070                     analogRead@channel:	
   483                           ; 2 bytes @ 0x0
   484                           
   485                           
   486                           ; 2 bytes @ 0x0
   487  0070                     	ds	2
   488  0072                     ??_strcmp:	
   489  0072                     ??_analogRead:	
   490                           ; 1 bytes @ 0x2
   491                           
   492  0072                     serialPrint@str:	
   493                           ; 1 bytes @ 0x2
   494                           
   495  0072                     serialRead@i:	
   496                           ; 1 bytes @ 0x2
   497                           
   498  0072                     analogRead@result:	
   499                           ; 2 bytes @ 0x2
   500                           
   501                           
   502                           ; 2 bytes @ 0x2
   503  0072                     	ds	1
   504  0073                     ??_riskCalling:	
   505  0073                     ??_threatCalling:	
   506                           ; 1 bytes @ 0x3
   507                           
   508  0073                     ??_safeCalling:	
   509                           ; 1 bytes @ 0x3
   510                           
   511                           
   512                           ; 1 bytes @ 0x3
   513  0073                     	ds	1
   514  0074                     serialRead@str:	
   515  0074                     strcmp@r:	
   516                           ; 1 bytes @ 0x4
   517                           
   518                           
   519                           ; 1 bytes @ 0x4
   520  0074                     	ds	1
   521  0075                     strcmp@s1:	
   522                           
   523                           ; 1 bytes @ 0x5
   524  0075                     	ds	1
   525  0076                     ??_main:	
   526                           
   527                           ; 1 bytes @ 0x6
   528  0076                     	ds	3
   529                           
   530                           	psect	maintext
   531  070C                     __pmaintext:	
   532 ;;
   533 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   534 ;;
   535 ;; *************** function _main *****************
   536 ;; Defined at:
   537 ;;		line 47 in file "main.c"
   538 ;; Parameters:    Size  Location     Type
   539 ;;		None
   540 ;; Auto vars:     Size  Location     Type
   541 ;;		None
   542 ;; Return value:  Size  Location     Type
   543 ;;                  2  116[None  ] int 
   544 ;; Registers used:
   545 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   546 ;; Tracked objects:
   547 ;;		On entry : B00/0
   548 ;;		On exit  : 0/0
   549 ;;		Unchanged: 0/0
   550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   551 ;;      Params:         0       0       0       0       0
   552 ;;      Locals:         0       0       0       0       0
   553 ;;      Temps:          3       0       0       0       0
   554 ;;      Totals:         3       0       0       0       0
   555 ;;Total ram usage:        3 bytes
   556 ;; Hardware stack levels required when called:    3
   557 ;; This function calls:
   558 ;;		_analogInit
   559 ;;		_analogRead
   560 ;;		_gpioInit
   561 ;;		_riskCalling
   562 ;;		_safeCalling
   563 ;;		_serialInit
   564 ;;		_serialPrint
   565 ;;		_serialRead
   566 ;;		_strcmp
   567 ;;		_threatCalling
   568 ;; This function is called by:
   569 ;;		Startup code after reset
   570 ;; This function uses a non-reentrant model
   571 ;;
   572                           
   573                           
   574                           ;psect for function _main
   575  070C                     _main:	
   576                           
   577                           ;main.c: 49: gpioInit();
   578                           
   579                           ;incstack = 0
   580                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   581  070C  120A  118A  258F  120A  118A  	fcall	_gpioInit
   582                           
   583                           ;main.c: 50: serialInit();
   584  0711  120A  118A  25AB  120A  118A  	fcall	_serialInit
   585                           
   586                           ;main.c: 51: analogInit();
   587  0716  120A  118A  259E  120A  118A  	fcall	_analogInit
   588                           
   589                           ;main.c: 52: _delay((unsigned long)((100)*(4000000/4000.0)));
   590  071B  3082               	movlw	130
   591  071C  00F7               	movwf	??_main+1
   592  071D  30DD               	movlw	221
   593  071E  00F6               	movwf	??_main
   594  071F                     u337:	
   595  071F  0BF6               	decfsz	??_main,f
   596  0720  2F1F               	goto	u337
   597  0721  0BF7               	decfsz	??_main+1,f
   598  0722  2F1F               	goto	u337
   599  0723  2F24               	nop2
   600  0724                     l898:	
   601                           ;main.c: 53: while(1)
   602                           
   603                           
   604                           ;main.c: 54: {
   605                           ;main.c: 55: if(!access)
   606  0724  1283               	bcf	3,5	;RP0=0, select bank0
   607  0725  1303               	bcf	3,6	;RP1=0, select bank0
   608  0726  0834               	movf	_access,w
   609  0727  0435               	iorwf	_access+1,w
   610  0728  1D03               	btfss	3,2
   611  0729  2F65               	goto	l910
   612                           
   613                           ;main.c: 56: {
   614                           ;main.c: 57: serialPrint("Approximate the Tag\r\n");
   615  072A  3060               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   616  072B  120A  118A  265E  120A  118A  	fcall	_serialPrint
   617                           
   618                           ;main.c: 58: serialRead(INID);
   619  0730  3036               	movlw	(low (_INID| 0))& (0+255)
   620  0731  120A  118A  26A7  120A  118A  	fcall	_serialRead
   621                           
   622                           ;main.c: 59: if(!strcmp(INID, UID))
   623  0736  304A               	movlw	(low (_UID| 0))& (0+255)
   624  0737  00F6               	movwf	??_main
   625  0738  0876               	movf	??_main,w
   626  0739  00F0               	movwf	strcmp@s2
   627  073A  3036               	movlw	(low (_INID| 0))& (0+255)
   628  073B  120A  118A  2682  120A  118A  	fcall	_strcmp
   629  0740  0870               	movf	?_strcmp,w
   630  0741  0471               	iorwf	?_strcmp+1,w
   631  0742  1D03               	btfss	3,2
   632  0743  2F4B               	goto	l904
   633                           
   634                           ;main.c: 60: {
   635                           ;main.c: 61: access = 1;
   636  0744  3001               	movlw	1
   637  0745  1283               	bcf	3,5	;RP0=0, select bank0
   638  0746  1303               	bcf	3,6	;RP1=0, select bank0
   639  0747  00B4               	movwf	_access
   640  0748  3000               	movlw	0
   641  0749  00B5               	movwf	_access+1
   642                           
   643                           ;main.c: 62: }
   644  074A  2FD9               	goto	l930
   645  074B                     l904:	
   646                           
   647                           ;main.c: 63: else
   648                           ;main.c: 64: {
   649                           ;main.c: 65: serialPrint("Access Denied!\r\n");
   650  074B  308A               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   651  074C  120A  118A  265E  120A  118A  	fcall	_serialPrint
   652                           
   653                           ;main.c: 66: temp = RCREG;
   654  0751  1283               	bcf	3,5	;RP0=0, select bank0
   655  0752  1303               	bcf	3,6	;RP1=0, select bank0
   656  0753  081A               	movf	26,w	;volatile
   657  0754  00F6               	movwf	??_main
   658  0755  0876               	movf	??_main,w
   659  0756  00FD               	movwf	_temp
   660                           
   661                           ;main.c: 67: _delay((unsigned long)((1000)*(4000000/4000.0)));
   662  0757  3006               	movlw	6
   663  0758  00F8               	movwf	??_main+2
   664  0759  3013               	movlw	19
   665  075A  00F7               	movwf	??_main+1
   666  075B  30B1               	movlw	177
   667  075C  00F6               	movwf	??_main
   668  075D                     u347:	
   669  075D  0BF6               	decfsz	??_main,f
   670  075E  2F5D               	goto	u347
   671  075F  0BF7               	decfsz	??_main+1,f
   672  0760  2F5D               	goto	u347
   673  0761  0BF8               	decfsz	??_main+2,f
   674  0762  2F5D               	goto	u347
   675  0763  2F64               	nop2
   676                           
   677                           ;main.c: 68: }
   678                           ;main.c: 69: }
   679  0764  2FD9               	goto	l930
   680  0765                     l910:	
   681                           
   682                           ;main.c: 70: else
   683                           ;main.c: 71: {
   684                           ;main.c: 72: serialPrint("\r\nAccess Granted!\r\n");
   685  0765  3076               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   686  0766  120A  118A  265E  120A  118A  	fcall	_serialPrint
   687  076B  2F7C               	goto	l122
   688  076C                     l914:	
   689  076C  087C               	movf	_reading2+1,w
   690  076D  3A80               	xorlw	128
   691  076E  00FF               	movwf	127
   692  076F  3080               	movlw	128
   693  0770  027F               	subwf	127,w
   694  0771  1D03               	skipz
   695  0772  2F75               	goto	u285
   696  0773  3064               	movlw	100
   697  0774  027B               	subwf	_reading2,w
   698  0775                     u285:	
   699  0775  1803               	skipnc
   700  0776  2FA1               	goto	l918
   701                           
   702                           ;main.c: 80: {
   703                           ;main.c: 81: riskCalling();
   704  0777  120A  118A  25FE  120A  118A  	fcall	_riskCalling
   705  077C                     l122:	
   706                           ;main.c: 73: while(1)
   707                           
   708                           ;main.c: 82: }
   709                           
   710                           
   711                           ;main.c: 74: {
   712                           ;main.c: 75: reading1 = analogRead(1);
   713  077C  3001               	movlw	1
   714  077D  00F0               	movwf	analogRead@channel
   715  077E  3000               	movlw	0
   716  077F  00F1               	movwf	analogRead@channel+1
   717  0780  120A  118A  26D8  120A  118A  	fcall	_analogRead
   718  0785  0871               	movf	?_analogRead+1,w
   719  0786  00FA               	movwf	_reading1+1
   720  0787  0870               	movf	?_analogRead,w
   721  0788  00F9               	movwf	_reading1
   722                           
   723                           ;main.c: 76: reading2 = analogRead(2);
   724  0789  3002               	movlw	2
   725  078A  00F0               	movwf	analogRead@channel
   726  078B  3000               	movlw	0
   727  078C  00F1               	movwf	analogRead@channel+1
   728  078D  120A  118A  26D8  120A  118A  	fcall	_analogRead
   729  0792  0871               	movf	?_analogRead+1,w
   730  0793  00FC               	movwf	_reading2+1
   731  0794  0870               	movf	?_analogRead,w
   732  0795  00FB               	movwf	_reading2
   733                           
   734                           ;main.c: 79: if(reading1 < 100 && reading2 < 100)
   735  0796  087A               	movf	_reading1+1,w
   736  0797  3A80               	xorlw	128
   737  0798  00FF               	movwf	127
   738  0799  3080               	movlw	128
   739  079A  027F               	subwf	127,w
   740  079B  1D03               	skipz
   741  079C  2F9F               	goto	u275
   742  079D  3064               	movlw	100
   743  079E  0279               	subwf	_reading1,w
   744  079F                     u275:	
   745  079F  1C03               	btfss	3,0
   746  07A0  2F6C               	goto	l914
   747  07A1                     l918:	
   748                           
   749                           ;main.c: 83: else if((reading1 < 100 && reading2 >= 100) || (reading2 < 100 && reading1 
      +                          >= 100))
   750  07A1  087A               	movf	_reading1+1,w
   751  07A2  3A80               	xorlw	128
   752  07A3  00FF               	movwf	127
   753  07A4  3080               	movlw	128
   754  07A5  027F               	subwf	127,w
   755  07A6  1D03               	skipz
   756  07A7  2FAA               	goto	u295
   757  07A8  3064               	movlw	100
   758  07A9  0279               	subwf	_reading1,w
   759  07AA                     u295:	
   760  07AA  1803               	skipnc
   761  07AB  2FB7               	goto	l922
   762  07AC  087C               	movf	_reading2+1,w
   763  07AD  3A80               	xorlw	128
   764  07AE  00FF               	movwf	127
   765  07AF  3080               	movlw	128
   766  07B0  027F               	subwf	127,w
   767  07B1  1D03               	skipz
   768  07B2  2FB5               	goto	u305
   769  07B3  3064               	movlw	100
   770  07B4  027B               	subwf	_reading2,w
   771  07B5                     u305:	
   772  07B5  1803               	skipnc
   773  07B6  2FCD               	goto	l926
   774  07B7                     l922:	
   775  07B7  087C               	movf	_reading2+1,w
   776  07B8  3A80               	xorlw	128
   777  07B9  00FF               	movwf	127
   778  07BA  3080               	movlw	128
   779  07BB  027F               	subwf	127,w
   780  07BC  1D03               	skipz
   781  07BD  2FC0               	goto	u315
   782  07BE  3064               	movlw	100
   783  07BF  027B               	subwf	_reading2,w
   784  07C0                     u315:	
   785  07C0  1803               	skipnc
   786  07C1  2FD3               	goto	l928
   787  07C2  087A               	movf	_reading1+1,w
   788  07C3  3A80               	xorlw	128
   789  07C4  00FF               	movwf	127
   790  07C5  3080               	movlw	128
   791  07C6  027F               	subwf	127,w
   792  07C7  1D03               	skipz
   793  07C8  2FCB               	goto	u325
   794  07C9  3064               	movlw	100
   795  07CA  0279               	subwf	_reading1,w
   796  07CB                     u325:	
   797  07CB  1C03               	skipc
   798  07CC  2FD3               	goto	l928
   799  07CD                     l926:	
   800                           
   801                           ;main.c: 84: {
   802                           ;main.c: 85: threatCalling();
   803  07CD  120A  118A  25C9  120A  118A  	fcall	_threatCalling
   804                           
   805                           ;main.c: 86: }
   806  07D2  2F7C               	goto	l122
   807  07D3                     l928:	
   808                           
   809                           ;main.c: 87: else
   810                           ;main.c: 88: {
   811                           ;main.c: 89: safeCalling();
   812  07D3  120A  118A  25B9  120A  118A  	fcall	_safeCalling
   813  07D8  2F7C               	goto	l122
   814  07D9                     l930:	
   815                           
   816                           ;main.c: 90: }
   817                           ;main.c: 91: }
   818                           ;main.c: 92: }
   819                           ;main.c: 93: _delay((unsigned long)((20)*(4000000/4000.0)));
   820  07D9  301A               	movlw	26
   821  07DA  00F7               	movwf	??_main+1
   822  07DB  30F8               	movlw	248
   823  07DC  00F6               	movwf	??_main
   824  07DD                     u357:	
   825  07DD  0BF6               	decfsz	??_main,f
   826  07DE  2FDD               	goto	u357
   827  07DF  0BF7               	decfsz	??_main+1,f
   828  07E0  2FDD               	goto	u357
   829  07E1  0000               	nop
   830  07E2  2F24               	goto	l898
   831  07E3                     __end_of_main:	
   832                           
   833                           	psect	text1
   834  05C9                     __ptext1:	
   835 ;; *************** function _threatCalling *****************
   836 ;; Defined at:
   837 ;;		line 122 in file "main.c"
   838 ;; Parameters:    Size  Location     Type
   839 ;;		None
   840 ;; Auto vars:     Size  Location     Type
   841 ;;		None
   842 ;; Return value:  Size  Location     Type
   843 ;;                  1    wreg      void 
   844 ;; Registers used:
   845 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   846 ;; Tracked objects:
   847 ;;		On entry : 0/0
   848 ;;		On exit  : 0/0
   849 ;;		Unchanged: 0/0
   850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   851 ;;      Params:         0       0       0       0       0
   852 ;;      Locals:         0       0       0       0       0
   853 ;;      Temps:          0       0       0       0       0
   854 ;;      Totals:         0       0       0       0       0
   855 ;;Total ram usage:        0 bytes
   856 ;; Hardware stack levels used:    1
   857 ;; Hardware stack levels required when called:    2
   858 ;; This function calls:
   859 ;;		_serialPrint
   860 ;;		_servoRotate90
   861 ;; This function is called by:
   862 ;;		_main
   863 ;; This function uses a non-reentrant model
   864 ;;
   865                           
   866                           
   867                           ;psect for function _threatCalling
   868  05C9                     _threatCalling:	
   869                           
   870                           ;main.c: 124: RC5 = 1;
   871                           
   872                           ;incstack = 0
   873                           ; Regs used in _threatCalling: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   874  05C9  1283               	bcf	3,5	;RP0=0, select bank0
   875  05CA  1303               	bcf	3,6	;RP1=0, select bank0
   876  05CB  1687               	bsf	7,5	;volatile
   877                           
   878                           ;main.c: 125: RC4 = 0;
   879  05CC  1207               	bcf	7,4	;volatile
   880                           
   881                           ;main.c: 126: RC3 = 0;
   882  05CD  1187               	bcf	7,3	;volatile
   883                           
   884                           ;main.c: 127: RC1 = 1;
   885  05CE  1487               	bsf	7,1	;volatile
   886                           
   887                           ;main.c: 128: serialPrint("Train crossing, be alert..\r\n");
   888  05CF  302C               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
   889  05D0  120A  118A  265E  120A  118A  	fcall	_serialPrint
   890                           
   891                           ;main.c: 129: servoRotate90();
   892  05D5  120A  118A  262A   	fcall	_servoRotate90
   893  05D8  0008               	return
   894  05D9                     __end_of_threatCalling:	
   895                           
   896                           	psect	text2
   897  0682                     __ptext2:	
   898 ;; *************** function _strcmp *****************
   899 ;; Defined at:
   900 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\strcmp.c"
   901 ;; Parameters:    Size  Location     Type
   902 ;;  s1              1    wreg     PTR const unsigned char 
   903 ;;		 -> INID(20), 
   904 ;;  s2              1    0[COMMON] PTR const unsigned char 
   905 ;;		 -> UID(20), 
   906 ;; Auto vars:     Size  Location     Type
   907 ;;  s1              1    5[COMMON] PTR const unsigned char 
   908 ;;		 -> INID(20), 
   909 ;;  r               1    4[COMMON] char 
   910 ;; Return value:  Size  Location     Type
   911 ;;                  2    0[COMMON] int 
   912 ;; Registers used:
   913 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   914 ;; Tracked objects:
   915 ;;		On entry : 0/0
   916 ;;		On exit  : 0/0
   917 ;;		Unchanged: 0/0
   918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   919 ;;      Params:         2       0       0       0       0
   920 ;;      Locals:         2       0       0       0       0
   921 ;;      Temps:          2       0       0       0       0
   922 ;;      Totals:         6       0       0       0       0
   923 ;;Total ram usage:        6 bytes
   924 ;; Hardware stack levels used:    1
   925 ;; This function calls:
   926 ;;		Nothing
   927 ;; This function is called by:
   928 ;;		_main
   929 ;; This function uses a non-reentrant model
   930 ;;
   931                           
   932                           
   933                           ;psect for function _strcmp
   934  0682                     _strcmp:	
   935                           
   936                           ;incstack = 0
   937                           ; Regs used in _strcmp: [wreg-fsr0h+status,2+status,0]
   938                           ;strcmp@s1 stored from wreg
   939  0682  00F5               	movwf	strcmp@s1
   940  0683  2E8C               	goto	l862
   941  0684                     l858:	
   942  0684  3001               	movlw	1
   943  0685  00F2               	movwf	??_strcmp
   944  0686  0872               	movf	??_strcmp,w
   945  0687  07F5               	addwf	strcmp@s1,f
   946  0688  3001               	movlw	1
   947  0689  00F2               	movwf	??_strcmp
   948  068A  0872               	movf	??_strcmp,w
   949  068B  07F0               	addwf	strcmp@s2,f
   950  068C                     l862:	
   951  068C  0875               	movf	strcmp@s1,w
   952  068D  0084               	movwf	4
   953  068E  1383               	bcf	3,7	;select IRP bank0
   954  068F  0800               	movf	0,w
   955  0690  00F2               	movwf	??_strcmp
   956  0691  0870               	movf	strcmp@s2,w
   957  0692  0084               	movwf	4
   958  0693  0300               	decf	0,w
   959  0694  3AFF               	xorlw	255
   960  0695  0772               	addwf	??_strcmp,w
   961  0696  00F3               	movwf	??_strcmp+1
   962  0697  0873               	movf	??_strcmp+1,w
   963  0698  00F4               	movwf	strcmp@r
   964  0699  0874               	movf	strcmp@r,w
   965  069A  1D03               	btfss	3,2
   966  069B  2EA1               	goto	l866
   967  069C  0875               	movf	strcmp@s1,w
   968  069D  0084               	movwf	4
   969  069E  0800               	movf	0,w
   970  069F  1D03               	btfss	3,2
   971  06A0  2E84               	goto	l858
   972  06A1                     l866:	
   973  06A1  0874               	movf	strcmp@r,w
   974  06A2  00F0               	movwf	?_strcmp
   975  06A3  01F1               	clrf	?_strcmp+1
   976  06A4  1BF0               	btfsc	?_strcmp,7
   977  06A5  03F1               	decf	?_strcmp+1,f
   978  06A6  0008               	return
   979  06A7                     __end_of_strcmp:	
   980                           
   981                           	psect	text3
   982  06A7                     __ptext3:	
   983 ;; *************** function _serialRead *****************
   984 ;; Defined at:
   985 ;;		line 20 in file "SerialHeader.h"
   986 ;; Parameters:    Size  Location     Type
   987 ;;  str             1    wreg     PTR unsigned char 
   988 ;;		 -> INID(20), 
   989 ;; Auto vars:     Size  Location     Type
   990 ;;  str             1    4[COMMON] PTR unsigned char 
   991 ;;		 -> INID(20), 
   992 ;;  i               2    2[COMMON] int 
   993 ;; Return value:  Size  Location     Type
   994 ;;                  1    wreg      void 
   995 ;; Registers used:
   996 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   997 ;; Tracked objects:
   998 ;;		On entry : 0/0
   999 ;;		On exit  : 0/0
  1000 ;;		Unchanged: 0/0
  1001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1002 ;;      Params:         0       0       0       0       0
  1003 ;;      Locals:         3       0       0       0       0
  1004 ;;      Temps:          2       0       0       0       0
  1005 ;;      Totals:         5       0       0       0       0
  1006 ;;Total ram usage:        5 bytes
  1007 ;; Hardware stack levels used:    1
  1008 ;; This function calls:
  1009 ;;		Nothing
  1010 ;; This function is called by:
  1011 ;;		_main
  1012 ;; This function uses a non-reentrant model
  1013 ;;
  1014                           
  1015                           
  1016                           ;psect for function _serialRead
  1017  06A7                     _serialRead:	
  1018                           
  1019                           ;incstack = 0
  1020                           ; Regs used in _serialRead: [wreg-fsr0h+status,2+status,0]
  1021                           ;serialRead@str stored from wreg
  1022  06A7  00F4               	movwf	serialRead@str
  1023                           
  1024                           ;SerialHeader.h: 22: int i = 0;
  1025  06A8  01F2               	clrf	serialRead@i
  1026  06A9  01F3               	clrf	serialRead@i+1
  1027  06AA                     l76:	
  1028                           ;SerialHeader.h: 24: {
  1029                           ;SerialHeader.h: 25: while(RCIF == 0);
  1030                           
  1031                           ;SerialHeader.h: 23: while(1)
  1032                           
  1033  06AA  1283               	bcf	3,5	;RP0=0, select bank0
  1034  06AB  1303               	bcf	3,6	;RP1=0, select bank0
  1035  06AC  1E8C               	btfss	12,5	;volatile
  1036  06AD  2EAA               	goto	l76
  1037                           
  1038                           ;SerialHeader.h: 26: str[i] = RCREG;
  1039  06AE  081A               	movf	26,w	;volatile
  1040  06AF  00F0               	movwf	??_serialRead
  1041  06B0  0872               	movf	serialRead@i,w
  1042  06B1  0774               	addwf	serialRead@str,w
  1043  06B2  00F1               	movwf	??_serialRead+1
  1044  06B3  0871               	movf	??_serialRead+1,w
  1045  06B4  0084               	movwf	4
  1046  06B5  0870               	movf	??_serialRead,w
  1047  06B6  1383               	bcf	3,7	;select IRP bank0
  1048  06B7  0080               	movwf	0
  1049                           
  1050                           ;SerialHeader.h: 27: if(str[i] == '\n' || str[i] == '\r')
  1051  06B8  0872               	movf	serialRead@i,w
  1052  06B9  0774               	addwf	serialRead@str,w
  1053  06BA  00F0               	movwf	??_serialRead
  1054  06BB  0870               	movf	??_serialRead,w
  1055  06BC  0084               	movwf	4
  1056  06BD  300A               	movlw	10
  1057  06BE  0600               	xorwf	0,w
  1058  06BF  1903               	btfsc	3,2
  1059  06C0  2ECA               	goto	l824
  1060  06C1  0872               	movf	serialRead@i,w
  1061  06C2  0774               	addwf	serialRead@str,w
  1062  06C3  00F0               	movwf	??_serialRead
  1063  06C4  0870               	movf	??_serialRead,w
  1064  06C5  0084               	movwf	4
  1065  06C6  300D               	movlw	13
  1066  06C7  0600               	xorwf	0,w
  1067  06C8  1D03               	btfss	3,2
  1068  06C9  2ED1               	goto	l826
  1069  06CA                     l824:	
  1070                           
  1071                           ;SerialHeader.h: 28: {
  1072                           ;SerialHeader.h: 29: str[i] = '\0';
  1073  06CA  0872               	movf	serialRead@i,w
  1074  06CB  0774               	addwf	serialRead@str,w
  1075  06CC  00F0               	movwf	??_serialRead
  1076  06CD  0870               	movf	??_serialRead,w
  1077  06CE  0084               	movwf	4
  1078  06CF  0180               	clrf	0
  1079                           
  1080                           ;SerialHeader.h: 30: break;
  1081  06D0  0008               	return
  1082  06D1                     l826:	
  1083                           
  1084                           ;SerialHeader.h: 31: }
  1085                           ;SerialHeader.h: 32: i++;
  1086  06D1  3001               	movlw	1
  1087  06D2  07F2               	addwf	serialRead@i,f
  1088  06D3  1803               	skipnc
  1089  06D4  0AF3               	incf	serialRead@i+1,f
  1090  06D5  3000               	movlw	0
  1091  06D6  07F3               	addwf	serialRead@i+1,f
  1092  06D7  2EAA               	goto	l76
  1093  06D8                     __end_of_serialRead:	
  1094                           
  1095                           	psect	text4
  1096  05AB                     __ptext4:	
  1097 ;; *************** function _serialInit *****************
  1098 ;; Defined at:
  1099 ;;		line 1 in file "SerialHeader.h"
  1100 ;; Parameters:    Size  Location     Type
  1101 ;;		None
  1102 ;; Auto vars:     Size  Location     Type
  1103 ;;		None
  1104 ;; Return value:  Size  Location     Type
  1105 ;;                  1    wreg      void 
  1106 ;; Registers used:
  1107 ;;		wreg
  1108 ;; Tracked objects:
  1109 ;;		On entry : 0/0
  1110 ;;		On exit  : 0/0
  1111 ;;		Unchanged: 0/0
  1112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1113 ;;      Params:         0       0       0       0       0
  1114 ;;      Locals:         0       0       0       0       0
  1115 ;;      Temps:          0       0       0       0       0
  1116 ;;      Totals:         0       0       0       0       0
  1117 ;;Total ram usage:        0 bytes
  1118 ;; Hardware stack levels used:    1
  1119 ;; This function calls:
  1120 ;;		Nothing
  1121 ;; This function is called by:
  1122 ;;		_main
  1123 ;; This function uses a non-reentrant model
  1124 ;;
  1125                           
  1126                           
  1127                           ;psect for function _serialInit
  1128  05AB                     _serialInit:	
  1129                           
  1130                           ;SerialHeader.h: 3: TRISC |= (1 << 7);
  1131                           
  1132                           ;incstack = 0
  1133                           ; Regs used in _serialInit: [wreg]
  1134  05AB  1683               	bsf	3,5	;RP0=1, select bank1
  1135  05AC  1303               	bcf	3,6	;RP1=0, select bank1
  1136  05AD  1787               	bsf	7,7	;volatile
  1137                           
  1138                           ;SerialHeader.h: 4: TXSTA = 0x24;
  1139  05AE  3024               	movlw	36
  1140  05AF  0098               	movwf	24	;volatile
  1141                           
  1142                           ;SerialHeader.h: 5: RCSTA = 0x90;
  1143  05B0  3090               	movlw	144
  1144  05B1  1283               	bcf	3,5	;RP0=0, select bank0
  1145  05B2  1303               	bcf	3,6	;RP1=0, select bank0
  1146  05B3  0098               	movwf	24	;volatile
  1147                           
  1148                           ;SerialHeader.h: 6: SPBRG = 25;
  1149  05B4  3019               	movlw	25
  1150  05B5  1683               	bsf	3,5	;RP0=1, select bank1
  1151  05B6  1303               	bcf	3,6	;RP1=0, select bank1
  1152  05B7  0099               	movwf	25	;volatile
  1153  05B8  0008               	return
  1154  05B9                     __end_of_serialInit:	
  1155                           
  1156                           	psect	text5
  1157  05B9                     __ptext5:	
  1158 ;; *************** function _safeCalling *****************
  1159 ;; Defined at:
  1160 ;;		line 132 in file "main.c"
  1161 ;; Parameters:    Size  Location     Type
  1162 ;;		None
  1163 ;; Auto vars:     Size  Location     Type
  1164 ;;		None
  1165 ;; Return value:  Size  Location     Type
  1166 ;;                  1    wreg      void 
  1167 ;; Registers used:
  1168 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1169 ;; Tracked objects:
  1170 ;;		On entry : 0/0
  1171 ;;		On exit  : 0/0
  1172 ;;		Unchanged: 0/0
  1173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1174 ;;      Params:         0       0       0       0       0
  1175 ;;      Locals:         0       0       0       0       0
  1176 ;;      Temps:          0       0       0       0       0
  1177 ;;      Totals:         0       0       0       0       0
  1178 ;;Total ram usage:        0 bytes
  1179 ;; Hardware stack levels used:    1
  1180 ;; Hardware stack levels required when called:    2
  1181 ;; This function calls:
  1182 ;;		_serialPrint
  1183 ;;		_servoRotate0
  1184 ;; This function is called by:
  1185 ;;		_main
  1186 ;; This function uses a non-reentrant model
  1187 ;;
  1188                           
  1189                           
  1190                           ;psect for function _safeCalling
  1191  05B9                     _safeCalling:	
  1192                           
  1193                           ;main.c: 134: RC4 = 1;
  1194                           
  1195                           ;incstack = 0
  1196                           ; Regs used in _safeCalling: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1197  05B9  1283               	bcf	3,5	;RP0=0, select bank0
  1198  05BA  1303               	bcf	3,6	;RP1=0, select bank0
  1199  05BB  1607               	bsf	7,4	;volatile
  1200                           
  1201                           ;main.c: 135: RC5 = 0;
  1202  05BC  1287               	bcf	7,5	;volatile
  1203                           
  1204                           ;main.c: 136: RC1 = 0;
  1205  05BD  1087               	bcf	7,1	;volatile
  1206                           
  1207                           ;main.c: 137: RC3 = 1;
  1208  05BE  1587               	bsf	7,3	;volatile
  1209                           
  1210                           ;main.c: 138: serialPrint("No threat detected..\r\n");
  1211  05BF  3049               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1212  05C0  120A  118A  265E  120A  118A  	fcall	_serialPrint
  1213                           
  1214                           ;main.c: 139: servoRotate0();
  1215  05C5  120A  118A  2613   	fcall	_servoRotate0
  1216  05C8  0008               	return
  1217  05C9                     __end_of_safeCalling:	
  1218                           
  1219                           	psect	text6
  1220  0613                     __ptext6:	
  1221 ;; *************** function _servoRotate0 *****************
  1222 ;; Defined at:
  1223 ;;		line 149 in file "main.c"
  1224 ;; Parameters:    Size  Location     Type
  1225 ;;		None
  1226 ;; Auto vars:     Size  Location     Type
  1227 ;;		None
  1228 ;; Return value:  Size  Location     Type
  1229 ;;                  1    wreg      void 
  1230 ;; Registers used:
  1231 ;;		wreg
  1232 ;; Tracked objects:
  1233 ;;		On entry : 0/0
  1234 ;;		On exit  : 0/0
  1235 ;;		Unchanged: 0/0
  1236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1237 ;;      Params:         0       0       0       0       0
  1238 ;;      Locals:         0       0       0       0       0
  1239 ;;      Temps:          2       0       0       0       0
  1240 ;;      Totals:         2       0       0       0       0
  1241 ;;Total ram usage:        2 bytes
  1242 ;; Hardware stack levels used:    1
  1243 ;; This function calls:
  1244 ;;		Nothing
  1245 ;; This function is called by:
  1246 ;;		_safeCalling
  1247 ;; This function uses a non-reentrant model
  1248 ;;
  1249                           
  1250                           
  1251                           ;psect for function _servoRotate0
  1252  0613                     _servoRotate0:	
  1253                           
  1254                           ;main.c: 151: RC2 = 1;
  1255                           
  1256                           ;incstack = 0
  1257                           ; Regs used in _servoRotate0: [wreg]
  1258  0613  1283               	bcf	3,5	;RP0=0, select bank0
  1259  0614  1303               	bcf	3,6	;RP1=0, select bank0
  1260  0615  1507               	bsf	7,2	;volatile
  1261                           
  1262                           ;main.c: 152: _delay((unsigned long)((1)*(4000000/4000.0)));
  1263  0616  30F9               	movlw	249
  1264  0617  00F0               	movwf	??_servoRotate0
  1265  0618                     u367:	
  1266  0618  0000               	nop
  1267  0619  0BF0               	decfsz	??_servoRotate0,f
  1268  061A  2E18               	goto	u367
  1269  061B  2E1C               	nop2	;nop
  1270  061C  0000               	nop
  1271                           
  1272                           ;main.c: 153: RC2 = 0;
  1273  061D  1283               	bcf	3,5	;RP0=0, select bank0
  1274  061E  1303               	bcf	3,6	;RP1=0, select bank0
  1275  061F  1107               	bcf	7,2	;volatile
  1276                           
  1277                           ;main.c: 154: _delay((unsigned long)((19)*(4000000/4000.0)));
  1278  0620  3019               	movlw	25
  1279  0621  00F1               	movwf	??_servoRotate0+1
  1280  0622  30AB               	movlw	171
  1281  0623  00F0               	movwf	??_servoRotate0
  1282  0624                     u377:	
  1283  0624  0BF0               	decfsz	??_servoRotate0,f
  1284  0625  2E24               	goto	u377
  1285  0626  0BF1               	decfsz	??_servoRotate0+1,f
  1286  0627  2E24               	goto	u377
  1287  0628  2E29               	nop2
  1288  0629  0008               	return
  1289  062A                     __end_of_servoRotate0:	
  1290                           
  1291                           	psect	text7
  1292  05FE                     __ptext7:	
  1293 ;; *************** function _riskCalling *****************
  1294 ;; Defined at:
  1295 ;;		line 103 in file "main.c"
  1296 ;; Parameters:    Size  Location     Type
  1297 ;;		None
  1298 ;; Auto vars:     Size  Location     Type
  1299 ;;		None
  1300 ;; Return value:  Size  Location     Type
  1301 ;;                  1    wreg      void 
  1302 ;; Registers used:
  1303 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1304 ;; Tracked objects:
  1305 ;;		On entry : 0/0
  1306 ;;		On exit  : 0/0
  1307 ;;		Unchanged: 0/0
  1308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1309 ;;      Params:         0       0       0       0       0
  1310 ;;      Locals:         0       0       0       0       0
  1311 ;;      Temps:          0       0       0       0       0
  1312 ;;      Totals:         0       0       0       0       0
  1313 ;;Total ram usage:        0 bytes
  1314 ;; Hardware stack levels used:    1
  1315 ;; Hardware stack levels required when called:    2
  1316 ;; This function calls:
  1317 ;;		_riskAlarm
  1318 ;;		_serialPrint
  1319 ;;		_servoRotate90
  1320 ;; This function is called by:
  1321 ;;		_main
  1322 ;; This function uses a non-reentrant model
  1323 ;;
  1324                           
  1325                           
  1326                           ;psect for function _riskCalling
  1327  05FE                     _riskCalling:	
  1328                           
  1329                           ;main.c: 105: RC5 = 1;
  1330                           
  1331                           ;incstack = 0
  1332                           ; Regs used in _riskCalling: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1333  05FE  1283               	bcf	3,5	;RP0=0, select bank0
  1334  05FF  1303               	bcf	3,6	;RP1=0, select bank0
  1335  0600  1687               	bsf	7,5	;volatile
  1336                           
  1337                           ;main.c: 106: RC4 = 0;
  1338  0601  1207               	bcf	7,4	;volatile
  1339                           
  1340                           ;main.c: 107: RC3 = 1;
  1341  0602  1587               	bsf	7,3	;volatile
  1342                           
  1343                           ;main.c: 108: RC1 = 0;
  1344  0603  1087               	bcf	7,1	;volatile
  1345                           
  1346                           ;main.c: 109: serialPrint("Train stopped as the track is not clear!\r\n");
  1347  0604  3001               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1348  0605  120A  118A  265E  120A  118A  	fcall	_serialPrint
  1349                           
  1350                           ;main.c: 110: servoRotate90();
  1351  060A  120A  118A  262A  120A  118A  	fcall	_servoRotate90
  1352                           
  1353                           ;main.c: 111: riskAlarm();
  1354  060F  120A  118A  2642   	fcall	_riskAlarm
  1355  0612  0008               	return
  1356  0613                     __end_of_riskCalling:	
  1357                           
  1358                           	psect	text8
  1359  062A                     __ptext8:	
  1360 ;; *************** function _servoRotate90 *****************
  1361 ;; Defined at:
  1362 ;;		line 142 in file "main.c"
  1363 ;; Parameters:    Size  Location     Type
  1364 ;;		None
  1365 ;; Auto vars:     Size  Location     Type
  1366 ;;		None
  1367 ;; Return value:  Size  Location     Type
  1368 ;;                  1    wreg      void 
  1369 ;; Registers used:
  1370 ;;		wreg
  1371 ;; Tracked objects:
  1372 ;;		On entry : 0/0
  1373 ;;		On exit  : 0/0
  1374 ;;		Unchanged: 0/0
  1375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1376 ;;      Params:         0       0       0       0       0
  1377 ;;      Locals:         0       0       0       0       0
  1378 ;;      Temps:          2       0       0       0       0
  1379 ;;      Totals:         2       0       0       0       0
  1380 ;;Total ram usage:        2 bytes
  1381 ;; Hardware stack levels used:    1
  1382 ;; This function calls:
  1383 ;;		Nothing
  1384 ;; This function is called by:
  1385 ;;		_riskCalling
  1386 ;;		_threatCalling
  1387 ;; This function uses a non-reentrant model
  1388 ;;
  1389                           
  1390                           
  1391                           ;psect for function _servoRotate90
  1392  062A                     _servoRotate90:	
  1393                           
  1394                           ;main.c: 144: RC2 = 1;
  1395                           
  1396                           ;incstack = 0
  1397                           ; Regs used in _servoRotate90: [wreg]
  1398  062A  1283               	bcf	3,5	;RP0=0, select bank0
  1399  062B  1303               	bcf	3,6	;RP1=0, select bank0
  1400  062C  1507               	bsf	7,2	;volatile
  1401                           
  1402                           ;main.c: 145: _delay((unsigned long)((2)*(4000000/4000.0)));
  1403  062D  3003               	movlw	3
  1404  062E  00F1               	movwf	??_servoRotate90+1
  1405  062F  3097               	movlw	151
  1406  0630  00F0               	movwf	??_servoRotate90
  1407  0631                     u387:	
  1408  0631  0BF0               	decfsz	??_servoRotate90,f
  1409  0632  2E31               	goto	u387
  1410  0633  0BF1               	decfsz	??_servoRotate90+1,f
  1411  0634  2E31               	goto	u387
  1412  0635  2E36               	nop2
  1413                           
  1414                           ;main.c: 146: RC2 = 0;
  1415  0636  1283               	bcf	3,5	;RP0=0, select bank0
  1416  0637  1303               	bcf	3,6	;RP1=0, select bank0
  1417  0638  1107               	bcf	7,2	;volatile
  1418                           
  1419                           ;main.c: 147: _delay((unsigned long)((18)*(4000000/4000.0)));
  1420  0639  3018               	movlw	24
  1421  063A  00F1               	movwf	??_servoRotate90+1
  1422  063B  305F               	movlw	95
  1423  063C  00F0               	movwf	??_servoRotate90
  1424  063D                     u397:	
  1425  063D  0BF0               	decfsz	??_servoRotate90,f
  1426  063E  2E3D               	goto	u397
  1427  063F  0BF1               	decfsz	??_servoRotate90+1,f
  1428  0640  2E3D               	goto	u397
  1429  0641  0008               	return
  1430  0642                     __end_of_servoRotate90:	
  1431                           
  1432                           	psect	text9
  1433  065E                     __ptext9:	
  1434 ;; *************** function _serialPrint *****************
  1435 ;; Defined at:
  1436 ;;		line 9 in file "SerialHeader.h"
  1437 ;; Parameters:    Size  Location     Type
  1438 ;;  str             1    wreg     PTR unsigned char 
  1439 ;;		 -> STR_6(23), STR_5(29), STR_4(43), STR_3(20), 
  1440 ;;		 -> STR_2(17), STR_1(22), 
  1441 ;; Auto vars:     Size  Location     Type
  1442 ;;  str             1    2[COMMON] PTR unsigned char 
  1443 ;;		 -> STR_6(23), STR_5(29), STR_4(43), STR_3(20), 
  1444 ;;		 -> STR_2(17), STR_1(22), 
  1445 ;;  i               2    0[COMMON] int 
  1446 ;; Return value:  Size  Location     Type
  1447 ;;                  1    wreg      void 
  1448 ;; Registers used:
  1449 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  1450 ;; Tracked objects:
  1451 ;;		On entry : 0/0
  1452 ;;		On exit  : 0/0
  1453 ;;		Unchanged: 0/0
  1454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1455 ;;      Params:         0       0       0       0       0
  1456 ;;      Locals:         3       0       0       0       0
  1457 ;;      Temps:          0       0       0       0       0
  1458 ;;      Totals:         3       0       0       0       0
  1459 ;;Total ram usage:        3 bytes
  1460 ;; Hardware stack levels used:    2
  1461 ;; This function calls:
  1462 ;;		Nothing
  1463 ;; This function is called by:
  1464 ;;		_main
  1465 ;;		_riskCalling
  1466 ;;		_threatCalling
  1467 ;;		_safeCalling
  1468 ;; This function uses a non-reentrant model
  1469 ;;
  1470                           
  1471                           
  1472                           ;psect for function _serialPrint
  1473  065E                     _serialPrint:	
  1474                           
  1475                           ;incstack = 0
  1476                           ; Regs used in _serialPrint: [wreg-fsr0h+status,2+status,0+pclath]
  1477                           ;serialPrint@str stored from wreg
  1478  065E  00F2               	movwf	serialPrint@str
  1479                           
  1480                           ;SerialHeader.h: 11: int i = 0;
  1481  065F  01F0               	clrf	serialPrint@i
  1482  0660  01F1               	clrf	serialPrint@i+1
  1483  0661                     l794:	
  1484                           ;SerialHeader.h: 12: while(str[i] != '\0')
  1485                           
  1486  0661  0870               	movf	serialPrint@i,w
  1487  0662  0772               	addwf	serialPrint@str,w
  1488  0663  0084               	movwf	4
  1489  0664  120A  118A  2003  120A  118A  	fcall	stringdir
  1490  0669  3A00               	xorlw	0
  1491  066A  1903               	btfsc	3,2
  1492  066B  0008               	return
  1493                           
  1494                           ;SerialHeader.h: 13: {
  1495                           ;SerialHeader.h: 14: TXREG = str[i];
  1496  066C  0870               	movf	serialPrint@i,w
  1497  066D  0772               	addwf	serialPrint@str,w
  1498  066E  0084               	movwf	4
  1499  066F  120A  118A  2003  120A  118A  	fcall	stringdir
  1500  0674  1283               	bcf	3,5	;RP0=0, select bank0
  1501  0675  1303               	bcf	3,6	;RP1=0, select bank0
  1502  0676  0099               	movwf	25	;volatile
  1503  0677                     l68:	
  1504                           ;SerialHeader.h: 15: while(TRMT == 0);
  1505                           
  1506  0677  1683               	bsf	3,5	;RP0=1, select bank1
  1507  0678  1303               	bcf	3,6	;RP1=0, select bank1
  1508  0679  1C98               	btfss	24,1	;volatile
  1509  067A  2E77               	goto	l68
  1510                           
  1511                           ;SerialHeader.h: 16: i++;
  1512  067B  3001               	movlw	1
  1513  067C  07F0               	addwf	serialPrint@i,f
  1514  067D  1803               	skipnc
  1515  067E  0AF1               	incf	serialPrint@i+1,f
  1516  067F  3000               	movlw	0
  1517  0680  07F1               	addwf	serialPrint@i+1,f
  1518  0681  2E61               	goto	l794
  1519  0682                     __end_of_serialPrint:	
  1520                           
  1521                           	psect	text10
  1522  0642                     __ptext10:	
  1523 ;; *************** function _riskAlarm *****************
  1524 ;; Defined at:
  1525 ;;		line 114 in file "main.c"
  1526 ;; Parameters:    Size  Location     Type
  1527 ;;		None
  1528 ;; Auto vars:     Size  Location     Type
  1529 ;;		None
  1530 ;; Return value:  Size  Location     Type
  1531 ;;                  1    wreg      void 
  1532 ;; Registers used:
  1533 ;;		wreg
  1534 ;; Tracked objects:
  1535 ;;		On entry : 0/0
  1536 ;;		On exit  : 0/0
  1537 ;;		Unchanged: 0/0
  1538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1539 ;;      Params:         0       0       0       0       0
  1540 ;;      Locals:         0       0       0       0       0
  1541 ;;      Temps:          3       0       0       0       0
  1542 ;;      Totals:         3       0       0       0       0
  1543 ;;Total ram usage:        3 bytes
  1544 ;; Hardware stack levels used:    1
  1545 ;; This function calls:
  1546 ;;		Nothing
  1547 ;; This function is called by:
  1548 ;;		_riskCalling
  1549 ;; This function uses a non-reentrant model
  1550 ;;
  1551                           
  1552                           
  1553                           ;psect for function _riskAlarm
  1554  0642                     _riskAlarm:	
  1555                           
  1556                           ;main.c: 116: RC0 = 1;
  1557                           
  1558                           ;incstack = 0
  1559                           ; Regs used in _riskAlarm: [wreg]
  1560  0642  1283               	bcf	3,5	;RP0=0, select bank0
  1561  0643  1303               	bcf	3,6	;RP1=0, select bank0
  1562  0644  1407               	bsf	7,0	;volatile
  1563                           
  1564                           ;main.c: 117: _delay((unsigned long)((300)*(4000000/4000.0)));
  1565  0645  3002               	movlw	2
  1566  0646  00F2               	movwf	??_riskAlarm+2
  1567  0647  3086               	movlw	134
  1568  0648  00F1               	movwf	??_riskAlarm+1
  1569  0649  3099               	movlw	153
  1570  064A  00F0               	movwf	??_riskAlarm
  1571  064B                     u407:	
  1572  064B  0BF0               	decfsz	??_riskAlarm,f
  1573  064C  2E4B               	goto	u407
  1574  064D  0BF1               	decfsz	??_riskAlarm+1,f
  1575  064E  2E4B               	goto	u407
  1576  064F  0BF2               	decfsz	??_riskAlarm+2,f
  1577  0650  2E4B               	goto	u407
  1578                           
  1579                           ;main.c: 118: RC0 = 0;
  1580  0651  1283               	bcf	3,5	;RP0=0, select bank0
  1581  0652  1303               	bcf	3,6	;RP1=0, select bank0
  1582  0653  1007               	bcf	7,0	;volatile
  1583                           
  1584                           ;main.c: 119: _delay((unsigned long)((100)*(4000000/4000.0)));
  1585  0654  3082               	movlw	130
  1586  0655  00F1               	movwf	??_riskAlarm+1
  1587  0656  30DD               	movlw	221
  1588  0657  00F0               	movwf	??_riskAlarm
  1589  0658                     u417:	
  1590  0658  0BF0               	decfsz	??_riskAlarm,f
  1591  0659  2E58               	goto	u417
  1592  065A  0BF1               	decfsz	??_riskAlarm+1,f
  1593  065B  2E58               	goto	u417
  1594  065C  2E5D               	nop2
  1595  065D  0008               	return
  1596  065E                     __end_of_riskAlarm:	
  1597                           
  1598                           	psect	text11
  1599  058F                     __ptext11:	
  1600 ;; *************** function _gpioInit *****************
  1601 ;; Defined at:
  1602 ;;		line 97 in file "main.c"
  1603 ;; Parameters:    Size  Location     Type
  1604 ;;		None
  1605 ;; Auto vars:     Size  Location     Type
  1606 ;;		None
  1607 ;; Return value:  Size  Location     Type
  1608 ;;                  1    wreg      void 
  1609 ;; Registers used:
  1610 ;;		status,2
  1611 ;; Tracked objects:
  1612 ;;		On entry : 0/0
  1613 ;;		On exit  : 0/0
  1614 ;;		Unchanged: 0/0
  1615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1616 ;;      Params:         0       0       0       0       0
  1617 ;;      Locals:         0       0       0       0       0
  1618 ;;      Temps:          0       0       0       0       0
  1619 ;;      Totals:         0       0       0       0       0
  1620 ;;Total ram usage:        0 bytes
  1621 ;; Hardware stack levels used:    1
  1622 ;; This function calls:
  1623 ;;		Nothing
  1624 ;; This function is called by:
  1625 ;;		_main
  1626 ;; This function uses a non-reentrant model
  1627 ;;
  1628                           
  1629                           
  1630                           ;psect for function _gpioInit
  1631  058F                     _gpioInit:	
  1632                           
  1633                           ;main.c: 99: TRISC = 0x00;
  1634                           
  1635                           ;incstack = 0
  1636                           ; Regs used in _gpioInit: [status,2]
  1637  058F  1683               	bsf	3,5	;RP0=1, select bank1
  1638  0590  1303               	bcf	3,6	;RP1=0, select bank1
  1639  0591  0187               	clrf	7	;volatile
  1640                           
  1641                           ;main.c: 100: PORTC = 0x00;
  1642  0592  1283               	bcf	3,5	;RP0=0, select bank0
  1643  0593  1303               	bcf	3,6	;RP1=0, select bank0
  1644  0594  0187               	clrf	7	;volatile
  1645  0595  0008               	return
  1646  0596                     __end_of_gpioInit:	
  1647                           
  1648                           	psect	text12
  1649  06D8                     __ptext12:	
  1650 ;; *************** function _analogRead *****************
  1651 ;; Defined at:
  1652 ;;		line 7 in file "analogHeader.h"
  1653 ;; Parameters:    Size  Location     Type
  1654 ;;  channel         2    0[COMMON] int 
  1655 ;; Auto vars:     Size  Location     Type
  1656 ;;  result          2    2[COMMON] short 
  1657 ;; Return value:  Size  Location     Type
  1658 ;;                  2    0[COMMON] short 
  1659 ;; Registers used:
  1660 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1661 ;; Tracked objects:
  1662 ;;		On entry : 0/0
  1663 ;;		On exit  : 0/0
  1664 ;;		Unchanged: 0/0
  1665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1666 ;;      Params:         2       0       0       0       0
  1667 ;;      Locals:         2       0       0       0       0
  1668 ;;      Temps:          0       0       0       0       0
  1669 ;;      Totals:         4       0       0       0       0
  1670 ;;Total ram usage:        4 bytes
  1671 ;; Hardware stack levels used:    1
  1672 ;; This function calls:
  1673 ;;		Nothing
  1674 ;; This function is called by:
  1675 ;;		_main
  1676 ;; This function uses a non-reentrant model
  1677 ;;
  1678                           
  1679                           
  1680                           ;psect for function _analogRead
  1681  06D8                     _analogRead:	
  1682                           
  1683                           ;analogHeader.h: 9: short result;
  1684                           ;analogHeader.h: 10: switch(channel)
  1685                           
  1686                           ;incstack = 0
  1687                           ; Regs used in _analogRead: [wreg-fsr0h+status,2+status,0]
  1688  06D8  2EE6               	goto	l844
  1689  06D9                     l832:	
  1690                           ;analogHeader.h: 11: {
  1691                           ;analogHeader.h: 12: case 0: ADCON0 = 0x41; break;
  1692                           
  1693  06D9  3041               	movlw	65
  1694  06DA  2EE2               	goto	L4
  1695  06DB                     l834:	
  1696                           ;analogHeader.h: 13: case 1: ADCON0 = 0x49; break;
  1697                           
  1698  06DB  3049               	movlw	73
  1699  06DC  2EE2               	goto	L4
  1700  06DD                     l836:	
  1701                           ;analogHeader.h: 14: case 2: ADCON0 = 0x51; break;
  1702                           
  1703  06DD  3051               	movlw	81
  1704  06DE  2EE2               	goto	L4
  1705  06DF                     l838:	
  1706                           ;analogHeader.h: 15: case 3: ADCON0 = 0x59; break;
  1707                           
  1708  06DF  3059               	movlw	89
  1709  06E0  2EE2               	goto	L4
  1710  06E1                     l840:	
  1711                           ;analogHeader.h: 16: case 4: ADCON0 = 0x61; break;
  1712                           
  1713  06E1  3061               	movlw	97
  1714  06E2                     L4:	
  1715  06E2  1283               	bcf	3,5	;RP0=0, select bank0
  1716  06E3  1303               	bcf	3,6	;RP1=0, select bank0
  1717  06E4  009F               	movwf	31	;volatile
  1718                           
  1719                           ;analogHeader.h: 17: }
  1720  06E5  2EFC               	goto	l92
  1721  06E6                     l844:	
  1722                           
  1723                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1724                           ; Switch size 1, requested type "space"
  1725                           ; Number of cases is 1, Range of values is 0 to 0
  1726                           ; switch strategies available:
  1727                           ; Name         Instructions Cycles
  1728                           ; simple_byte            4     3 (average)
  1729                           ; direct_byte           11     8 (fixed)
  1730                           ; jumptable            260     6 (fixed)
  1731                           ;	Chosen strategy is simple_byte
  1732  06E6  0871               	movf	analogRead@channel+1,w
  1733  06E7  3A00               	xorlw	0	; case 0
  1734  06E8  1903               	skipnz
  1735  06E9  2EEB               	goto	l952
  1736  06EA  2EFC               	goto	l92
  1737  06EB                     l952:	
  1738                           
  1739                           ; Switch size 1, requested type "space"
  1740                           ; Number of cases is 5, Range of values is 0 to 4
  1741                           ; switch strategies available:
  1742                           ; Name         Instructions Cycles
  1743                           ; simple_byte           16     9 (average)
  1744                           ; direct_byte           23     8 (fixed)
  1745                           ; jumptable            260     6 (fixed)
  1746                           ;	Chosen strategy is simple_byte
  1747  06EB  0870               	movf	analogRead@channel,w
  1748  06EC  3A00               	xorlw	0	; case 0
  1749  06ED  1903               	skipnz
  1750  06EE  2ED9               	goto	l832
  1751  06EF  3A01               	xorlw	1	; case 1
  1752  06F0  1903               	skipnz
  1753  06F1  2EDB               	goto	l834
  1754  06F2  3A03               	xorlw	3	; case 2
  1755  06F3  1903               	skipnz
  1756  06F4  2EDD               	goto	l836
  1757  06F5  3A01               	xorlw	1	; case 3
  1758  06F6  1903               	skipnz
  1759  06F7  2EDF               	goto	l838
  1760  06F8  3A07               	xorlw	7	; case 4
  1761  06F9  1903               	skipnz
  1762  06FA  2EE1               	goto	l840
  1763  06FB  2EFC               	goto	l92
  1764  06FC                     l92:	
  1765                           
  1766                           ;analogHeader.h: 18: GO = 1;
  1767  06FC  1283               	bcf	3,5	;RP0=0, select bank0
  1768  06FD  1303               	bcf	3,6	;RP1=0, select bank0
  1769  06FE  151F               	bsf	31,2	;volatile
  1770  06FF                     l97:	
  1771                           ;analogHeader.h: 19: while(GO == 1);
  1772                           
  1773  06FF  191F               	btfsc	31,2	;volatile
  1774  0700  2EFF               	goto	l97
  1775                           
  1776                           ;analogHeader.h: 20: result = (ADRESH << 8) | ADRESL;
  1777  0701  081E               	movf	30,w	;volatile
  1778  0702  00F3               	movwf	analogRead@result+1
  1779  0703  1683               	bsf	3,5	;RP0=1, select bank1
  1780  0704  1303               	bcf	3,6	;RP1=0, select bank1
  1781  0705  081E               	movf	30,w	;volatile
  1782  0706  00F2               	movwf	analogRead@result
  1783                           
  1784                           ;analogHeader.h: 21: return result;
  1785  0707  0873               	movf	analogRead@result+1,w
  1786  0708  00F1               	movwf	?_analogRead+1
  1787  0709  0872               	movf	analogRead@result,w
  1788  070A  00F0               	movwf	?_analogRead
  1789  070B  0008               	return
  1790  070C                     __end_of_analogRead:	
  1791                           
  1792                           	psect	text13
  1793  059E                     __ptext13:	
  1794 ;; *************** function _analogInit *****************
  1795 ;; Defined at:
  1796 ;;		line 1 in file "analogHeader.h"
  1797 ;; Parameters:    Size  Location     Type
  1798 ;;		None
  1799 ;; Auto vars:     Size  Location     Type
  1800 ;;		None
  1801 ;; Return value:  Size  Location     Type
  1802 ;;                  1    wreg      void 
  1803 ;; Registers used:
  1804 ;;		wreg
  1805 ;; Tracked objects:
  1806 ;;		On entry : 0/0
  1807 ;;		On exit  : 0/0
  1808 ;;		Unchanged: 0/0
  1809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1810 ;;      Params:         0       0       0       0       0
  1811 ;;      Locals:         0       0       0       0       0
  1812 ;;      Temps:          0       0       0       0       0
  1813 ;;      Totals:         0       0       0       0       0
  1814 ;;Total ram usage:        0 bytes
  1815 ;; Hardware stack levels used:    1
  1816 ;; This function calls:
  1817 ;;		Nothing
  1818 ;; This function is called by:
  1819 ;;		_main
  1820 ;; This function uses a non-reentrant model
  1821 ;;
  1822                           
  1823                           
  1824                           ;psect for function _analogInit
  1825  059E                     _analogInit:	
  1826                           
  1827                           ;analogHeader.h: 3: TRISA |= 0xFF;
  1828                           
  1829                           ;incstack = 0
  1830                           ; Regs used in _analogInit: [wreg]
  1831  059E  30FF               	movlw	255
  1832  059F  1683               	bsf	3,5	;RP0=1, select bank1
  1833  05A0  1303               	bcf	3,6	;RP1=0, select bank1
  1834  05A1  0085               	movwf	5	;volatile
  1835                           
  1836                           ;analogHeader.h: 4: ADCON0 = 0x41;
  1837  05A2  3041               	movlw	65
  1838  05A3  1283               	bcf	3,5	;RP0=0, select bank0
  1839  05A4  1303               	bcf	3,6	;RP1=0, select bank0
  1840  05A5  009F               	movwf	31	;volatile
  1841                           
  1842                           ;analogHeader.h: 5: ADCON1 = 0x80;
  1843  05A6  3080               	movlw	128
  1844  05A7  1683               	bsf	3,5	;RP0=1, select bank1
  1845  05A8  1303               	bcf	3,6	;RP1=0, select bank1
  1846  05A9  009F               	movwf	31	;volatile
  1847  05AA  0008               	return
  1848  05AB                     __end_of_analogInit:	
  1849  007E                     btemp	set	126	;btemp
  1850  007E                     wtemp	set	126
  1851  007E                     wtemp0	set	126
  1852  0080                     wtemp1	set	128
  1853  0082                     wtemp2	set	130
  1854  0084                     wtemp3	set	132
  1855  0086                     wtemp4	set	134
  1856  0088                     wtemp5	set	136
  1857  007F                     wtemp6	set	127
  1858  007E                     ttemp	set	126
  1859  007E                     ttemp0	set	126
  1860  0081                     ttemp1	set	129
  1861  0084                     ttemp2	set	132
  1862  0087                     ttemp3	set	135
  1863  007F                     ttemp4	set	127
  1864  007E                     ltemp	set	126
  1865  007E                     ltemp0	set	126
  1866  0082                     ltemp1	set	130
  1867  0086                     ltemp2	set	134
  1868  0080                     ltemp3	set	128


Data Sizes:
    Strings     154
    Constant    0
    Data        20
    BSS         47
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      14
    BANK0            80      0      62
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 20
		 -> UID(BANK0[20]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 20
		 -> INID(BANK0[20]), 

    serialRead@str	PTR unsigned char  size(1) Largest target is 20
		 -> INID(BANK0[20]), 

    serialPrint@str	PTR unsigned char  size(1) Largest target is 43
		 -> STR_6(CODE[23]), STR_5(CODE[29]), STR_4(CODE[43]), STR_3(CODE[20]), 
		 -> STR_2(CODE[17]), STR_1(CODE[22]), 


Critical Paths under _main in COMMON

    _main->_strcmp
    _threatCalling->_serialPrint
    _safeCalling->_serialPrint
    _riskCalling->_riskAlarm
    _riskCalling->_serialPrint

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    1535
                                              6 COMMON     3     3      0
                         _analogInit
                         _analogRead
                           _gpioInit
                        _riskCalling
                        _safeCalling
                         _serialInit
                        _serialPrint
                         _serialRead
                             _strcmp
                      _threatCalling
 ---------------------------------------------------------------------------------
 (1) _threatCalling                                        0     0      0     252
                        _serialPrint
                      _servoRotate90
 ---------------------------------------------------------------------------------
 (1) _strcmp                                               6     4      2     171
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (1) _serialRead                                           5     5      0     205
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (1) _serialInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _safeCalling                                          0     0      0     252
                        _serialPrint
                       _servoRotate0
 ---------------------------------------------------------------------------------
 (2) _servoRotate0                                         2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _riskCalling                                          0     0      0     252
                          _riskAlarm
                        _serialPrint
                      _servoRotate90
 ---------------------------------------------------------------------------------
 (2) _servoRotate90                                        2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _serialPrint                                          3     3      0     252
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _riskAlarm                                            3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _gpioInit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _analogRead                                           4     2      2     151
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _analogInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _analogInit
   _analogRead
   _gpioInit
   _riskCalling
     _riskAlarm
     _serialPrint
     _servoRotate90
   _safeCalling
     _serialPrint
     _servoRotate0
   _serialInit
   _serialPrint
   _serialRead
   _strcmp
   _threatCalling
     _serialPrint
     _servoRotate90

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      0      3E       5       77.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      9       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      4C      12        0.0%
ABS                  0      0      4C       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Wed May 22 14:40:59 2024

                      pc 0002              __CFG_CP$OFF 0000                       l92 06FC  
                     l68 0677                       l76 06AA                       l97 06FF  
                     _GO 00FA                       fsr 0004                      l122 077C  
                    l910 0765                      l840 06E1                      l832 06D9  
                    l824 06CA                      l904 074B                      l834 06DB  
                    l826 06D1                      l922 07B7                      l914 076C  
                    l930 07D9                      l836 06DD                      l844 06E6  
                    l838 06DF                      l862 068C                      l926 07CD  
                    l918 07A1                      l952 06EB                      l928 07D3  
                    l794 0661                      l866 06A1                      l858 0684  
                    l898 0724                      _RC0 0038                      _RC1 0039  
                    _RC2 003A                      _RC3 003B                      _RC4 003C  
                    _RC5 003D                      u305 07B5                      u315 07C0  
                    u325 07CB                      u407 064B                      u417 0658  
                    u337 071F             __CFG_CPD$OFF 0000                      u275 079F  
                    u347 075D                      u357 07DD                      u285 0775  
                    u367 0618                      u295 07AA                      u377 0624  
                    u387 0631                      u397 063D                      _UID 004A  
                    fsr0 0004                      indf 0000             __CFG_FOSC$XT 0000  
           __CFG_LVP$OFF 0000                     STR_1 0068                     STR_2 0092  
                   STR_3 007E                     STR_4 0009                     STR_5 0034  
                   STR_6 0051                     _INID 0036                     _RCIF 0065  
                   _TRMT 04C1          ??_threatCalling 0073             __CFG_WRT$OFF 0000  
                   _main 070C                     _temp 007D                     btemp 007E  
                   ltemp 007E                     start 0000                     ttemp 007E  
                   wtemp 007E          ??_servoRotate90 0070             ?_safeCalling 0070  
                  ?_main 0070            __CFG_WDTE$OFF 0000                    _RCREG 001A  
                  _RCSTA 0018                    _SPBRG 0099                    _PORTC 0007  
                  _TRISA 0085                    _TRISC 0087                    _TXREG 0019  
                  _TXSTA 0098           __CFG_BOREN$OFF 0000                    pclath 000A  
                  ltemp0 007E                    ltemp1 0082                    ltemp2 0086  
                  ltemp3 0080                    ttemp0 007E                    ttemp1 0081  
                  ttemp2 0084                    ttemp3 0087                    ttemp4 007F  
                  status 0003                    wtemp0 007E                    wtemp1 0080  
                  wtemp2 0082                    wtemp3 0084                    wtemp4 0086  
                  wtemp5 0088                    wtemp6 007F          __initialization 07E3  
           __end_of_main 07E3                   ??_main 0076                   _ADCON0 001F  
                 _ADCON1 009F                   _ADRESH 001E                   _ADRESL 009E  
           ?_riskCalling 0070           __CFG_PWRTE$OFF 0000             ?_serialPrint 0070  
                 _adcStr 0020                   _access 0034         __end_of_gpioInit 0596  
                 _strcmp 0682        analogRead@channel 0070  __end_of__initialization 07FC  
         __pcstackCOMMON 0070             __pidataBANK0 05EA     __size_of_safeCalling 0010  
             __pbssBANK0 0020               _analogInit 059E               _analogRead 06D8  
             __pmaintext 070C       __size_of_riskAlarm 001C                  ?_strcmp 0070  
             __stringtab 0003                ?_gpioInit 0070    __end_of_threatCalling 05D9  
   __size_of_riskCalling 0015    __end_of_servoRotate90 0642     __size_of_serialPrint 0024  
                __ptext1 05C9                  __ptext2 0682                  __ptext3 06A7  
                __ptext4 05AB                  __ptext5 05B9                  __ptext6 0613  
                __ptext7 05FE                  __ptext8 062A                  __ptext9 065E  
        __size_of_strcmp 0025              serialRead@i 0072                  clrloop0 0597  
   end_of_initialization 07FC               ??_gpioInit 0070        __end_of_riskAlarm 065E  
            ?_analogInit 0070              ?_analogRead 0070           serialPrint@str 0072  
             _serialInit 05AB               _serialRead 06A7            ?_servoRotate0 0070  
                strcmp@r 0074           ??_servoRotate0 0070           __end_of_strcmp 06A7  
    __size_of_analogInit 000D      __size_of_analogRead 0034      start_initialization 07E3  
            ?_serialInit 0070              ?_serialRead 0070            ??_safeCalling 0073  
             init_fetch0 05D9              __pdataBANK0 004A                 ??_strcmp 0072  
       analogRead@result 0072              __pbssCOMMON 0079                ___latbits 0002  
      __size_of_gpioInit 0007                __pstrings 0003      __end_of_safeCalling 05C9  
   __end_of_servoRotate0 062A      __size_of_serialInit 000E      __size_of_serialRead 0031  
          serialRead@str 0074             ??_analogInit 0070             ??_analogRead 0072  
          ??_riskCalling 0073                clear_ram0 0596            ??_serialPrint 0070  
              _riskAlarm 0642              __stringbase 0008   __size_of_threatCalling 0010  
     __end_of_analogInit 05AB       __end_of_analogRead 070C   __size_of_servoRotate90 0018  
             ?_riskAlarm 0070              _safeCalling 05B9      __end_of_riskCalling 0613  
    __end_of_serialPrint 0682       __end_of__stringtab 0009                 __ptext10 0642  
               __ptext11 058F                 __ptext12 06D8                 __ptext13 059E  
               _gpioInit 058F            __size_of_main 00D7                 _reading1 0079  
               _reading2 007B            _threatCalling 05C9             ??_serialInit 0070  
           ??_serialRead 0070             serialPrint@i 0070            _servoRotate90 062A  
  __size_of_servoRotate0 0017                 init_ram0 05DD       __end_of_serialInit 05B9  
     __end_of_serialRead 06D8           ?_threatCalling 0070              _riskCalling 05FE  
              stringcode 0003              ??_riskAlarm 0070              _serialPrint 065E  
         ?_servoRotate90 0070             _servoRotate0 0613                 strcmp@s1 0075  
               strcmp@s2 0070                 stringdir 0003                 stringtab 0003  
